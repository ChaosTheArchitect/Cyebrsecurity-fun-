import requests

class WebVulnScanner:

    def __init__(self, target_url):
        self.target_url = target_url
        self.session = requests.Session()

    def check_headers(self):
        print("[*] Checking HTTP headers...")
        response = self.session.get(self.target_url)
        headers_to_check = [
            ("X-Content-Type-Options", "nosniff"),
            ("X-Frame-Options", "DENY"),
            ("Content-Security-Policy", "default-src 'self'"),
            ("X-XSS-Protection", "1; mode=block")
        ]

        for header, expected_value in headers_to_check:
            actual_value = response.headers.get(header)
            if not actual_value:
                print(f"[-] Missing header: {header}")
            elif actual_value != expected_value:
                print(f"[-] Unexpected value for {header}. Expected: {expected_value}, Got: {actual_value}")
            else:
                print(f"[+] {header} is correctly set.")

    def check_directory_traversal(self):
        print("[*] Checking for directory traversal vulnerabilities...")
        directories_to_check = ["admin", "backup", "uploads", "images"]

        for directory in directories_to_check:
            full_url = f"{self.target_url}/{directory}"
            response = self.session.get(full_url)
            if response.status_code == 200:
                print(f"[!] Directory exposed: {full_url}")

    def check_xss(self):
        print("[*] Checking for XSS in URL parameters...")
        xss_test_script = "<script>alert('xss')</script>"
        response = self.session.get(self.target_url, params={"test": xss_test_script})

        if xss_test_script in response.text:
            print("[!] XSS vulnerability detected in URL parameters")

    def scan(self):
        print(f"[+] Starting scan on {self.target_url}...")
        self.check_headers()
        self.check_directory_traversal()
        self.check_xss()
        print("[+] Scan completed.")


if __name__ == "__main__":
    target = "http://your_target_website.com"
    scanner = WebVulnScanner(target)
    scanner.scan()
